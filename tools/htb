#!/usr/bin/python3

import argparse
import json
import os
import shutil
import subprocess
import socket
from sys import exit

########################################
# Configs

session = {
  'dns': '',
  'host': '',
  'path': os.path.expanduser("~/Documents/HTB")
	}

htbrc = os.path.expanduser("~/.htbrc")
screenshots = os.path.expanduser("~/Pictures/Screenshots")

########################################
# Functions

# Function to check for valid IP address format
def is_valid_ip(ip):
  try:
    socket.inet_pton(socket.AF_INET, ip)  # Attempt to convert to IPv4 address
    return True
  except (socket.error, ValueError):
    try:
      socket.inet_pton(socket.AF_INET6, ip)  # Attempt to convert to IPv6 address
      return True
    except (socket.error, ValueError):
      return False

def cmd_dns():
  print(f"[+] Updating DNS ...")

  # copy of session for modification
  new_dns = session['dns']

  A = None
  # if we have an IP address, replace the existing IP for our target
  if len(args.host)==1 and is_valid_ip(args.host[0]):
    A = args.host[0]
  else:
    # add domains to the draft
    for host in args.host:
      new_dns += f" {host}"

  # make sure domains are unique
  tokens = new_dns.split()
  if len(tokens) > 1:
    print (len(tokens))
    if A:
      tokens.pop(0)
    else:
      A = tokens.pop(0)
    tokens = set(sorted(tokens))
  else:
    tokens = [f"{session['host']}.htb"]

  # draft new dns
  new_dns = A+'   '+' '.join(tokens)

  # remove previous dns
  command = f"sudo sed -i '/{session['dns']}/d' /etc/hosts;"
  # now update our hosts file
  command += f"echo '{new_dns}' | sudo tee -a /etc/hosts"
  subprocess.run(command, shell=True)
  session['dns'] = new_dns

def cmd_img():
  print(f"[+] Moving screenshots ...")
  for screenshot in os.listdir(screenshots):
    if screenshot.startswith("screenshot_"):
      print(f" -  {screenshot}")
      shutil.move(f"{screenshots}/{screenshot}", f"{session['path']}/{session['host']}.htb/assets/")
      with open(f"{session['path']}/{session['host']}.htb/{session['host']}.md", 'a') as f:
        f.write(f"\n![]({session['path']}/{session['host']}.htb/assets/{screenshot})\n")
      f.close()

def cmd_show():
  print(f"[+] Active session:")
  print(f"    host: {session['host']}")
  print(f"    dns: {session['dns']}")
  print(f"[+] Firewall status:")
  try:
    output = subprocess.check_output(
        ["sudo", "firewall-cmd", "--list-all"], 
        text=True
    ).strip()
    filtered_output = "\n".join(line for line in output.splitlines() if any(word in line for word in ("services", "ports", "protocols")))
    print(filtered_output)
  except subprocess.CalledProcessError as e:
    print(f"Error executing command: {e}") 

def cmd_new():
  if args.host.endswith(".htb"):
        args.host = args.host[:-4]
  print(f"[+] Creating new session for {args.host}.htb ...")
  session['host'] = args.host
  if not os.path.exists(f"{args.host}.htb"):
    os.mkdir(f"{args.host}.htb")
    os.mkdir(f"{args.host}.htb/assets")
    shutil.copy("template.md", f"{args.host}.htb/{args.host}.md")
    try:
      with open(f"{args.host}.htb/{args.host}.md", 'w') as f:
          content = f.read()
          content = content.replace("Name", session['host'])
          f.seek(0)  # Move the file pointer to the beginning
          f.truncate(0)  # Clear the existing content
          f.write(content)
          f.close()
    except Exception as e:
      print(f"An error occurred: {e}")

  # update dns
  if args.ip:
    session['dns'] = f"{args.ip}   {args.host}.htb"
    command = f"echo '{session['dns']}' | sudo tee -a /etc/hosts"
    subprocess.run(command, shell=True)

########################################
# Entry

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Process a task.')
  subparsers = parser.add_subparsers(dest='command', help='The command to perform.')

  parser_new = subparsers.add_parser('new', help='Setup a new HTB attack session.')
  parser_new.add_argument('host', type=str, help='The host to target.')
  parser_new.add_argument('ip', type=str, nargs='?', help='Optional IP address')
  parser_new.set_defaults(func=cmd_new)

  parser_clean = subparsers.add_parser('clean', help='Remove the active session.')

  parser_dns = subparsers.add_parser('dns', help='Add a new entry to hosts.')
  parser_dns.add_argument('host', type=str, nargs='+', help='One or more host names to add to DNS. If you specify an IP by itself, it will replace the existing IP address.')
  parser_dns.set_defaults(func=cmd_dns)

  parser_dns = subparsers.add_parser('img', help='Add screenshots to session assets.')
  parser_dns.set_defaults(func=cmd_img)

  parser_show = subparsers.add_parser('show', help='Show active session information.')
  parser_show.set_defaults(func=cmd_show)

  args = parser.parse_args()

  # make sure we are in the right working path
  os.chdir(session['path'])

  if args.command:
    if args.command == "clean":
      if os.path.exists(htbrc):
        os.remove(htbrc)
      exit(0)
    if args.command != "new":
      # if we aren't setting a new session, load the old one
      with open(htbrc, 'r') as f:
        session = json.load(f)
      f.close()
    args.func()
  else:
    parser.print_help()
  
	# save our session state in case we want it later
  with open(htbrc, 'w') as f:
    json.dump(session, f)
  f.close()
